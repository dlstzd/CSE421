#include	<stdio.h>
#include	<stdlib.h>
#include	<string.h>
#include	<ctype.h>
#include	<sys/types.h>
#include	<sys/socket.h>
#include	<netdb.h>
#include 	<time.h>
#include	<netinet/in.h>
#include	<inttypes.h>
#include    <pthread.h>
#include    <semaphore.h>
#include    <fcntl.h>
#include    <stdbool.h>

struct node{

  int id; //actual number assigned to node from input
  int freq; //number of times the number has occurred used for LFU
  struct node *next;
};

struct node *head = NULL;
struct node *curr = NULL;

void print_list(void){
    struct node *ptr = head;
    printf("\nThe list is:\n");
    while(ptr != NULL){
        printf("%d, %d, \n", ptr->id, ptr->freq);
        ptr = ptr->next;
    }
    return;
}

struct node* create_list(){
  struct node *ptr = (struct node*)malloc(sizeof(struct node));
  if(ptr == NULL){
    printf("Error creating node\n");
    return NULL;
  }
  ptr->id = -1;
  ptr->freq = -1;
  ptr->next = NULL;
  head = curr = ptr;
  return ptr;

}

bool find_elem(int elem){ // possibly add frame size limiter here
  struct node *ptr = head;
  struct node *temp = NULL;
  bool found = false;

  while(ptr != NULL){
    if(ptr->id == elem){
        printf("id: %d   elem: %d\n", ptr->id, elem);
      found = true;
      break;
    }else{
      temp = ptr;
      ptr = ptr->next;
    }

  }
  if(found == true){ //increment count on node freq
    printf("Target Found\n");
    return true;
  }
  else{ //think about what to do here, replace element?
    printf("false \n");
    return false;
  }

}

struct node* add_elem(){
  if(head == NULL){
    return (create_list());
  }
  struct node *ptr = (struct node*)malloc(sizeof(struct node));
  if(ptr == NULL){
    printf("Error creating node\n");
    return NULL;
  }
  ptr->id = -1;
  ptr->freq = -1;
  ptr->next = NULL;

  curr->next = ptr;
  curr = ptr;

  return ptr;

}

void fifoinsert(int val){
    struct node *ptr = (struct node*)malloc(sizeof(struct node));
    ptr = curr;
    if (ptr->id == -1){
        ptr->id = val;
        if(ptr->next == NULL){
            curr = head;
        }
        else{ curr = ptr ->next; }
        }
    if (find_elem(val)){
        printf("Element found\n");
    }
    else{
       ptr->id = val;
        if(ptr->next == NULL){
            curr = head;
        }
        else{ curr = ptr ->next; }  
    }
}

int main(int argc, char** argv[]){
    
   // struct data* hello;
    //struct data* bye;
    struct node pop;
    int min;
    int id1 , id2 ,id3,id4,id5;
    id1 =1; id2 = 2; id3 = 3 ; id4=4 ; id5=5;
  
    add_elem();
add_elem();
add_elem();
add_elem();
add_elem();
curr = head;
fifoinsert(1); 
fifoinsert(2); 
fifoinsert(3); 
fifoinsert(4);
fifoinsert(5);
fifoinsert(1);
fifoinsert(6);
fifoinsert(8);
 print_list();
    return 0;
}
